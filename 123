import time
import cv2
from PIL import ImageGrab
import win32api, win32con,win32gui
import numpy as np
import threading
from keyboard_controller import MyInput
import pydirectinput

event1 = threading.Event()
controller = MyInput()

def space():
    time.sleep(0.2)
    controller.press_key('SPACE')
    time.sleep(0.2)
    controller.press_key('SPACE')
    time.sleep(0.2)
    controller.press_key('SPACE')
    time.sleep(0.2)
    controller.press_key('SPACE')
    pydirectinput.click(400, 710)
    return

def esc():
    controller.press_key('ESC')
    time.sleep(0.3)
    pydirectinput.click(510, 460)
    time.sleep(0.3)
    pydirectinput.click(460, 510)
    time.sleep(3)
    return

# 检测图片,返回真假
class ScreenDetector:
    def __init__(self, target_image_path, threshold=0.9):
        self.target_image = cv2.imread(target_image_path, cv2.IMREAD_GRAYSCALE)
        self.threshold = threshold
        self.is_detected = False

    def is_target_screen(self):
        time.sleep(0.6)
        screenshot = cv2.cvtColor(np.array(ImageGrab.grab()), cv2.COLOR_RGB2BGR)
        gray = cv2.cvtColor(screenshot, cv2.COLOR_BGR2GRAY)
        res = cv2.matchTemplate(gray, self.target_image, cv2.TM_CCOEFF_NORMED)
        min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(res)
        if max_val >= self.threshold:
            self.is_detected = True
            w, h = self.target_image.shape[::-1]
            center_x = max_loc[0] + w // 2
            center_y = max_loc[1] + h // 2
            return center_x, center_y
        else:
            self.is_detected = False
            return None

detector1 = ScreenDetector('img/1.png') #掉线
detector2 = ScreenDetector('img/2.png') #准备
detector3 = ScreenDetector('img/3.png') #比赛结束
detector4 = ScreenDetector('img/4.png') #新闻、选武器、通行证奖励、弃赛处罚
detector5 = ScreenDetector('img/5.png') #等级
detector6 = ScreenDetector('img/6.png') #团队死斗模式
detector7 = ScreenDetector('img/7.png') #选英雄
detector8 = ScreenDetector('img/8.png') #子弹时间模式
detector9 = ScreenDetector('img/9.png') #迎新模式
detector10 = ScreenDetector('img/10.png') #飞机人数
# detector11 = ScreenDetector('img/11.png') #训练模式
# detector12 = ScreenDetector('img/12.png') #进入训练
detector13 = ScreenDetector('img/13.png') # 解锁模式
# detector14 = ScreenDetector('img/14.png') #平台
# detector15 = ScreenDetector('img/15.png') #登入界面
detector16 = ScreenDetector('img/16.png',0.7) #控制复活点
detector17 = ScreenDetector('img/17.png') #经验
detector19 = ScreenDetector('img/19.png') #掉线继续按钮
detector20 = ScreenDetector('img/20.png') #质量调查
detector21 = ScreenDetector('img/21.png') #是否在大逃杀模式中
detector22 = ScreenDetector('img/22.png') #控制模式

def click_and_check():
    pydirectinput.doubleClick(520, 510)
    time.sleep(2)
    if detector1.is_target_screen(): #2
        pydirectinput.doubleClick(520, 510)
        time.sleep(2)
        if detector1.is_target_screen(): #3
            pydirectinput.doubleClick(520, 510)
            time.sleep(2)
            if detector19.is_target_screen(): #4
                pydirectinput.click(520, 510)
                time.sleep(3)
                if detector19.is_target_screen(): #5
                    esc()
                # ——while True： 继续检测掉线
                if detector4.is_target_screen() or detector20.is_target_screen():  # 检测新闻
                    controller.press_key('ESC')
                    pydirectinput.click(400, 710)
                if detector17.is_target_screen():  # 检测经验
                    space()
                if detector21.is_target_screen() or detector3.is_target_screen():  # 检测是否在大逃杀中
                    esc()
                if detector2.is_target_screen():  # 检测准备
                    return

            if detector4.is_target_screen() or detector20.is_target_screen():
                controller.press_key('ESC')
                pydirectinput.click(400, 710)
            if detector17.is_target_screen():
                space()
            if detector21.is_target_screen() or detector3.is_target_screen():
                esc()
            if detector2.is_target_screen():
                return

        if detector4.is_target_screen() or detector20.is_target_screen():
            controller.press_key('ESC')
            pydirectinput.click(400, 710)
        if detector17.is_target_screen():
            space()
        if detector21.is_target_screen() or detector3.is_target_screen():
            esc()
        if detector2.is_target_screen():
            return

    if detector4.is_target_screen() or detector20.is_target_screen():
        controller.press_key('ESC')
        pydirectinput.click(400, 710)
    if detector17.is_target_screen():
        space()
    if detector21.is_target_screen() or detector3.is_target_screen():
        esc()
    if detector2.is_target_screen():
        return
def zidan():
    time.sleep(30)
    while True:
        controller.random_hold()  # 随机操作进行挂机
        time.sleep(1)
        if detector1.is_target_screen():  # 检测掉线
            click_and_check()
            return
        if detector3.is_target_screen(): # 检测比赛结束
            esc()
            while True:
                if detector17.is_target_screen():  # 检测经验
                    space()
                if detector20.is_target_screen or detector4.is_target_screen():  # 新闻、比赛质量
                    controller.press_key('ESC')
                    pydirectinput.click(400, 710)
                if detector2.is_target_screen():
                    return
                if detector1.is_target_screen():  # 检测掉线
                    click_and_check()
                    return
def kozhi():
    time.sleep(30)
    while True:
        if detector4.is_target_screen():
            pydirectinput.click(250,340)
            time.sleep(1)
            pydirectinput.click(520, 610)
            while True:
                time.sleep(1)
                controller.random_hold() # 随机操作进行挂机
                max_loc = detector16.is_target_screen()  # 检测复活点
                if max_loc:
                    pydirectinput.click(max_loc[0], max_loc[1])  # 点击复活
                if detector1.is_target_screen():  # 检测掉线
                    click_and_check()
                    return
                if detector3.is_target_screen(): # 检测比赛结束
                    esc()
                    while True:
                        if detector17.is_target_screen():# 检测经验
                            space()
                        if detector20.is_target_screen or detector4.is_target_screen():  #新闻、比赛质量
                            controller.press_key('ESC')
                            pydirectinput.click(400, 710)
                        if detector2.is_target_screen():
                            return
                        if detector1.is_target_screen():  # 检测掉线
                            click_and_check()
                            return
def sido():
    time.sleep(30)
    while True:
        if detector4.is_target_screen():
            pydirectinput.click(250,340)
            while True:
                controller.random_hold()  # 随机操作进行挂机
                time.sleep(1)
                if detector1.is_target_screen():  # 检测掉线
                    click_and_check()
                    return
                if detector3.is_target_screen(): # 检测比赛结束
                    esc()
                    while True:
                        if detector17.is_target_screen(): # 检测经验
                            space()
                        if detector20.is_target_screen() or detector4.is_target_screen():
                            controller.press_key('ESC')
                            pydirectinput.click(400, 710)
                        if detector2.is_target_screen():
                            return
                        if detector1.is_target_screen():  # 检测掉线
                            click_and_check()
                            return

#检测模式+挂机
class Thread1(threading.Thread):
    def __init__(self):
        super().__init__()

    def run(self):
        while True:
            time.sleep(5)
            hwnd = win32gui.FindWindow(None, 'Apex Legends')
            if hwnd != 0:
                win32gui.SetWindowPos(hwnd, None, 0, 0, 0, 0, win32con.SWP_NOSIZE | win32con.SWP_SHOWWINDOW)
                pydirectinput.click(45,10)
                while True:
                    time.sleep(1)
                    if detector19.is_target_screen(): #检测游戏主界面 继续按钮
                        pydirectinput.doubleClick(520, 510)
                    time.sleep(1)
                    if detector4.is_target_screen() or detector20.is_target_screen(): # 检测新闻、比赛质量调查
                        controller.press_key('ESC')
                        pydirectinput.click(400, 710)
                    if detector2.is_target_screen(): #检测准备
                        while True:
                            loc5 = detector5.is_target_screen() #检测等级
                            if loc5:
                                esc()  # esc函数,跳到换号
                                # event1.set()
                                # event2.wait()
                                # event2.clear()
                            time.sleep(0.7)
                            if detector4.is_target_screen() or detector20.is_target_screen(): # 检测新闻、比赛质量调查
                                controller.press_key('ESC')
                                pydirectinput.click(400, 710)
                            if detector8.is_target_screen(): #进入子弹时间模式挂机
                                while True:
                                    if detector2.is_target_screen(): #检测准备
                                        pydirectinput.click(130, 670)
                                    if detector4.is_target_screen() or detector20.is_target_screen(): #检测新闻、比赛质量调查
                                        controller.press_key('ESC')
                                        pydirectinput.click(400, 710)
                                    if detector7.is_target_screen(): #检测选英雄
                                        pydirectinput.click(260, 530)
                                        break

                                    if detector1.is_target_screen():  # 检测掉线
                                        click_and_check()
                                        break
                                zidan()
                            if detector6.is_target_screen(): #进入死斗模式挂机
                                while True:
                                    if detector2.is_target_screen():  # 检测准备
                                        pydirectinput.click(130, 670)
                                    if detector4.is_target_screen() or detector20.is_target_screen():  # 检测新闻、比赛质量调查
                                        controller.press_key('ESC')
                                        pydirectinput.click(400, 710)
                                    if detector7.is_target_screen():  # 检测选英雄
                                        pydirectinput.click(260, 530)
                                        break

                                    if detector1.is_target_screen():  # 检测掉线
                                        click_and_check()
                                        break
                                sido()
                            if detector22.is_target_screen(): #进入控制模式挂机
                                while True:
                                    if detector2.is_target_screen():  # 检测准备
                                        pydirectinput.click(130, 670)
                                    if detector4.is_target_screen() or detector20.is_target_screen():  # 检测新闻等
                                        controller.press_key('ESC')
                                        pydirectinput.click(400, 710)
                                    if detector7.is_target_screen():  # 检测选英雄
                                        pydirectinput.click(260, 530)
                                        break

                                    if detector1.is_target_screen():  # 检测掉线
                                        click_and_check()
                                        break
                                kozhi()
                            else:
                                time.sleep(0.5)
                                pydirectinput.click(120, 580) #点模式
                                time.sleep(0.5)
                                while True:
                                    time.sleep(0.5)
                                    if detector2.is_target_screen(): #检测是否点模式
                                        pydirectinput.click(120, 580)
                                    if detector13.is_target_screen(): #检测死斗模式
                                        pydirectinput.click(550,400)
                                        break
                                    if detector9.is_target_screen(): #检测迎新模式
                                        pydirectinput.click(150, 350)
                                        time.sleep(0.5)
                                        pydirectinput.click(130, 670)
                                        while True: #检测飞机人数
                                            if detector10.is_target_screen() or detector21.is_target_screen() or detector3.is_target_screen():
                                                controller.press_key('e')
                                                esc()
                                            if detector17.is_target_screen(): # 检测经验
                                                space()
                                            if detector4.is_target_screen() or detector20.is_target_screen():  # 检测新闻
                                                controller.press_key('ESC')
                                                pydirectinput.click(400, 710)
                                            if detector2.is_target_screen():
                                                break
                                            if detector1.is_target_screen():  # 检测掉线
                                                click_and_check()
                                                break
                                    if detector4.is_target_screen() or detector20.is_target_screen():
                                        controller.press_key('ESC')
                                        pydirectinput.click(400, 710)

t1 = Thread1()
t1.start()
